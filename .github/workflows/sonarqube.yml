name: Sonarqube COBRA-API check

on:
  pull_request:
    branches:
      - master


jobs:
  build:
    name: Build
    runs-on: windows-latest
    permissions: read-all

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0 

      - name: Set up JDK 17
        uses: actions/setup-java@v1
        with:
          java-version: 17

      - name: Cache SonarQube packages
        uses: actions/cache@v1
        with:
          path: ~\sonar\cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Cache SonarQube scanner
        id: cache-sonar-scanner
        uses: actions/cache@v1
        with:
          path: .\.sonar\scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner

      - name: Install SonarQube scanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        shell: powershell
        run: |
          New-Item -Path .\.sonar\scanner -ItemType Directory
          dotnet tool update dotnet-sonarscanner --tool-path .\.sonar\scanner
          
      - name: Build and analyze
        env:
         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  
        run: |
          $slnFiles = Get-ChildItem -Path . -Recurse -Filter "*.sln" | Select-Object -ExpandProperty FullName
          foreach ($solution in $slnFiles) {
          if ($solution -like "*nordelta.cobra.webapi.sln") {
              ./.sonar/scanner/dotnet-sonarscanner begin /k:"cobra.api" /d:sonar.token="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="${{ secrets.SONAR_HOST_URL }}"
              (Get-Content nuget.config) | ForEach-Object {
              $_ -replace 'key="ClearTextPassword" value="[^"]*"', 'key="ClearTextPassword" value="${{ secrets.NUGET_TOKEN }}"'
              } | Set-Content nuget.config
              dotnet build "$solution"
              ./.sonar/scanner/dotnet-sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"
            } else {
              echo "Omitiendo análisis para $solution"
            }
          }
      - name: Obtener SonarQube Quality Gate Status
        id: sonarqube_status
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          curl -X GET -u "${SONAR_TOKEN}": -o quality-gate.json "${{ secrets.SONAR_HOST_URL }}"/api/qualitygates/project_status?projectKey="${{secrets.SONAR_PROJECT_KEY}}"
          echo "status=$(cat quality-gate.json)" >> $GITHUB_ENV     
  print:
    runs-on: ubuntu-latest
    needs: build 
    steps:

    - name: Obtener SonarQube Quality Gate Status
      id: sonarqube_status
      run: |
       curl -X GET -u ${{ secrets.SONAR_TOKEN }}: -o quality-gate.json ${{ secrets.SONAR_HOST_URL }}/api/qualitygates/project_status?projectKey=cobra.api
       echo "status=$(cat quality-gate.json)" >> $GITHUB_ENV
    - name: Comment PR
      uses: thollander/actions-comment-pull-request@v2
      with:
        message: |
            Estado del Análisis de SonarQube: ${{ fromJson(env.status).projectStatus.status == 'OK' && '✅ Exitoso' || '❌ Fallido' }}
            Métricas de condición:
              - :dart: Nuevo Índice de Fiabilidad
                Estado: ${{ fromJson(env.status).projectStatus.conditions[0].status == 'OK' && '✅ Exitoso' || '❌ Fallido' }}
                Umbral de Error: ${{ fromJson(env.status).projectStatus.conditions[0].errorThreshold }} (Cuanto menor es mejor)
                Valor Actual: ${{ fromJson(env.status).projectStatus.conditions[0].actualValue }}
              - :shield: Nuevo Índice de Seguridad
                Estado: ${{ fromJson(env.status).projectStatus.conditions[1].status == 'OK' && '✅ Exitoso' || '❌ Fallido' }}
                Umbral de Error: ${{ fromJson(env.status).projectStatus.conditions[1].errorThreshold }} (Cuanto menor es mejor)
                Valor Actual: ${{ fromJson(env.status).projectStatus.conditions[1].actualValue }}
              - :hammer_and_wrench: Nuevo Índice de Mantenibilidad
                Estado: ${{ fromJson(env.status).projectStatus.conditions[2].status == 'OK' && '✅ Exitoso' || '❌ Fallido' }}
                Umbral de Error: ${{ fromJson(env.status).projectStatus.conditions[2].errorThreshold }} (Cuanto menor es mejor)
                Valor Actual: ${{ fromJson(env.status).projectStatus.conditions[2].actualValue }}
              - :page_facing_up: Nueva Densidad de Líneas Duplicadas
                Estado: ${{ fromJson(env.status).projectStatus.conditions[3].status == 'OK' && '✅ Exitoso' || '❌ Fallido' }}
                Umbral de Error: ${{ fromJson(env.status).projectStatus.conditions[3].errorThreshold }} (Cuanto menor es mejor)
                Valor Actual: ${{ fromJson(env.status).projectStatus.conditions[3].actualValue }}
