name: Sonar Test

on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches:
      - master

jobs:
  build:
    name: Build
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Set up JDK 17
        uses: actions/setup-java@v1
        with:
          java-version: 17

      - name: Cache SonarQube packages
        uses: actions/cache@v2
        with:
          path: ~/sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Cache SonarQube scanner
        id: cache-sonar-scanner
        uses: actions/cache@v2
        with:
          path: ./.sonar/scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner

      - name: Install SonarQube scanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        run: |
          mkdir -p ./.sonar/scanner
          dotnet tool update dotnet-sonarscanner --tool-path ./.sonar/scanner
      
      - name: Actualizar NuGet
        run: nuget update -self

    
      - name: Build and analyze
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  
        run: |
          $slnFiles = Get-ChildItem -Path . -Recurse -Filter "*.sln" | Select-Object -ExpandProperty FullName
          foreach ($solution in $slnFiles) {

            # Verificar si el nombre de la solución no es igual al que quieres omitir
            if ($solution -ne "./cobra.service.mail.listener.communications.sln") {
              ./.sonar/scanner/dotnet-sonarscanner begin /k:"Cobra.Api" /d:sonar.token="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="${{ secrets.SONAR_HOST_URL }}"
              # Omitir el comando 'dotnet restore'
              # Omitir el comando 'dotnet build'
              ./.sonar/scanner/dotnet-sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"
            }

          }


      - name: Obtener SonarQube Quality Gate Status
        id: sonarqube_status
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          curl -X GET -u "${SONAR_TOKEN}": -o quality-gate.json "${{ secrets.SONAR_HOST_URL }}"/api/qualitygates/project_status?projectKey="${{secrets.SONAR_PROJECT_KEY}}"
          echo "status=$(cat quality-gate.json)" >> $GITHUB_ENV       
      
      - name: Comment PR
        uses: thollander/actions-comment-pull-request@v2
        with:
          message: |
            Estado del Análisis de SonarQube: ${{ fromJson(env.status).projectStatus.status == 'OK' && '✅ Exitoso' || '❌ Fallido' }}
            Métricas de condición:
              - :dart: Nuevo Índice de Fiabilidad
                Estado: ${{ fromJson(env.status).projectStatus.conditions[0].status == 'OK' && '✅ Exitoso' || '❌ Fallido' }}
                Umbral de Error: ${{ fromJson(env.status).projectStatus.conditions[0].errorThreshold }} (Cuanto menor es mejor)
                Valor Actual: ${{ fromJson(env.status).projectStatus.conditions[0].actualValue }}
              - :shield: Nuevo Índice de Seguridad
                Estado: ${{ fromJson(env.status).projectStatus.conditions[1].status == 'OK' && '✅ Exitoso' || '❌ Fallido' }}
                Umbral de Error: ${{ fromJson(env.status).projectStatus.conditions[1].errorThreshold }} (Cuanto menor es mejor)
                Valor Actual: ${{ fromJson(env.status).projectStatus.conditions[1].actualValue }}
              - :hammer_and_wrench: Nuevo Índice de Mantenibilidad
                Estado: ${{ fromJson(env.status).projectStatus.conditions[2].status == 'OK' && '✅ Exitoso' || '❌ Fallido' }}
                Umbral de Error: ${{ fromJson(env.status).projectStatus.conditions[2].errorThreshold }} (Cuanto menor es mejor)
                Valor Actual: ${{ fromJson(env.status).projectStatus.conditions[2].actualValue }}
              - :page_facing_up: Nueva Densidad de Líneas Duplicadas
                Estado: ${{ fromJson(env.status).projectStatus.conditions[3].status == 'OK' && '✅ Exitoso' || '❌ Fallido' }}
                Umbral de Error: ${{ fromJson(env.status).projectStatus.conditions[3].errorThreshold }} (Cuanto menor es mejor)
                Valor Actual: ${{ fromJson(env.status).projectStatus.conditions[3].actualValue }}
