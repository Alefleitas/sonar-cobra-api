using nordelta.cobra.webapi.Helpers;
using nordelta.cobra.webapi.Models;
using nordelta.cobra.webapi.Repositories.Contracts;
using nordelta.cobra.webapi.Services.Contracts;
using RestSharp;
using System;
using System.Collections.Generic;
using Microsoft.Extensions.Options;
using Newtonsoft.Json;
using nordelta.cobra.webapi.Configuration;
using nordelta.cobra.webapi.Services.DTOs;
using Serilog;
using System.Linq;
using nordelta.cobra.webapi.Controllers.ViewModels;
using Microsoft.Extensions.Configuration;
using System.Threading.Tasks;

namespace nordelta.cobra.webapi.Services
{
    public class LoginService : ILoginService
    {
        private readonly IRoleRepository _roleRepository;
        private readonly IRestrictionsListRepository _restrictionsListRepository;
        private readonly IRestClient _restClient;
        private readonly IOptionsMonitor<ApiServicesConfig> _ssoApiConfig;
        public IConfiguration Configuration { get; }
        public LoginService(IRoleRepository roleRepository, IRestrictionsListRepository restrictionsListRepository, IRestClient restClient, IOptionsMonitor<ApiServicesConfig> options, IConfiguration configuration)
        {
            ApiServicesConfig apiServicesConfig = options.Get(ApiServicesConfig.SsoApi);
            restClient.BaseUrl = new Uri(apiServicesConfig.Url);
            _restClient = restClient;
            _ssoApiConfig = options;
            _roleRepository = roleRepository;
            _restrictionsListRepository = restrictionsListRepository;

            _restClient.Timeout = 10 * 60000; // Milliseconds
            _restClient.ThrowOnAnyError = true;
            Configuration = configuration;
        }

        public ChangePasswordResponse ChangePassword(ChangePasswordRequest changePasswordRequest)
        {
            RestRequest request = new RestRequest("/Account/ChangePassword", Method.POST);
            request.AddHeader("Authorization", "Bearer " + changePasswordRequest.SsoToken);
            request.AddHeader("Accept", "application/json");

            request.AddJsonBody(new
            { changePasswordRequest.Email, changePasswordRequest.Password, changePasswordRequest.NewPassword });

            IRestResponse<ChangePasswordResponse> changePasswordResponse = _restClient.Execute<ChangePasswordResponse>(request);
            bool isValid = changePasswordResponse.IsSuccessful;

            return isValid ? changePasswordResponse.Data : null;
        }

        public UpdateUserResponse UpdateUser(UpdateUserRequest updateUserRequest)
        {
            RestRequest getRequest = new RestRequest("/Account/ObtenerDatosUsuario", Method.GET);
            getRequest.AddHeader("Authorization", "Bearer " + updateUserRequest.SsoToken);
            IRestResponse<GetUserResponse> getUserResponse = _restClient.Execute<GetUserResponse>(getRequest);

            bool isValidGetUser = getUserResponse.IsSuccessful;

            if (isValidGetUser)
            {
                RestRequest request = new RestRequest("/Account/ActualizarDatosUsuario", Method.POST);
                request.AddHeader("Authorization", "Bearer " + updateUserRequest.SsoToken);
                request.AddHeader("Accept", "application/json");

                request.AddJsonBody(new
                {
                    Id = getUserResponse.Data.Id,
                    IdApplicationUser = getUserResponse.Data.IdApplicationUser,
                    RazonSocial = updateUserRequest.SocialReason,
                    Cuit = updateUserRequest.Cuit,
                    TipoUsuario = getUserResponse.Data.TipoUsuario
                });

                IRestResponse<UpdateUserResponse> updateUserResponse = _restClient.Execute<UpdateUserResponse>(request);
                bool isValid = updateUserResponse.IsSuccessful;

                return isValid ? updateUserResponse.Data : null;
            }

            return null;
        }

        /// <summary>
        /// Returns an User object for the given SSO Token, after verifying it against SSO API
        /// </summary>
        /// <param name="ssoToken">Token generated by Consultatio SSO</param>
        /// <returns></returns>
        public User GetAuthenticatedUser(string ssoToken)
        {
            // client.Authenticator = new HttpBasicAuthenticator(username, password);

            //Get Roles for the token owner user
            RestRequest request = new RestRequest("/Account/GetRoles/{sistema}", Method.GET);
            request.AddUrlSegment("sistema", "Cobra"); // replaces matching token in request.Resource
            request.AddHeader("Authorization", "Bearer " + ssoToken);

            try
            {
                IRestResponse<List<string>> rolesResponse = (RestResponse<List<string>>)_restClient.Execute<List<string>>(request);
                if (rolesResponse.IsSuccessful)
                {
                    Log.Information(@"GetAuthenticatedUser, 
                        Type:GetAuthenticatedUserInfo,
                        Description: Response was successful:
                        request: {@request},
                        response: {@response}", request, rolesResponse);
                    dynamic ssoUserInfo = JwtManager.GetPayloadWithoutVerification(ssoToken);

                    List<string> additionalCuits = new List<string>()
                    {
                        ssoUserInfo.cuit.ToString()
                    };

                    if (ssoUserInfo.aditional_cuit != null)
                    {
                        Type cuitsType = ssoUserInfo.aditional_cuit.GetType();

                        if (cuitsType.Name == "JArray")
                        {
                            additionalCuits.AddRange(
                                JsonConvert.DeserializeObject<List<string>>(ssoUserInfo.aditional_cuit.ToString()));
                        }
                        else
                        {
                            additionalCuits.Add(ssoUserInfo.aditional_cuit.ToString());
                        }
                    }

                    List<string> businessUnits = new List<string>();
                    if (ssoUserInfo.empresa != null)
                    {
                        Type empresaType = ssoUserInfo.empresa.GetType();

                        if (empresaType.Name == "JArray")
                        {
                            businessUnits.AddRange(
                                JsonConvert.DeserializeObject<List<string>>(ssoUserInfo.empresa.ToString()));
                        }
                        else
                        {
                            businessUnits.Add(ssoUserInfo.empresa.ToString());
                        }
                    }

                    var user = new User()
                    {
                        Id = ssoUserInfo.idUsuario,
                        Email = ssoUserInfo.email,
                        BirthDate = Convert.ToDateTime(ssoUserInfo.birthDate),
                        FirstName = ssoUserInfo.razonSocial,
                        LastName = ssoUserInfo.razonSocial,
                        AccountNumber = ssoUserInfo.nroCuenta,
                        IsForeignCuit = Convert.ToBoolean(ssoUserInfo.esExtranjero),
                        ClientReference = ssoUserInfo.referenciaCliente,
                        Cuit = Convert.ToInt64(ssoUserInfo.cuit),
                        AdditionalCuits = additionalCuits,
                        BusinessUnits = businessUnits.Select(x => new BusinessUnit { Name = x }).ToList(),
                        Roles = _roleRepository.get(rolesResponse.Data ?? new List<string>())
                    };

                    FilterUserPermissions(ref user);

                    return user;
                }
                else
                {
                    Log.Warning(@"GetAuthenticatedUser, 
                        Type:GetAuthenticatedUserWarn,
                        Description: Response was not successful:
                        request: {@request},
                        response: {@response}", request, rolesResponse);
                    return null;
                }
            }
            catch (Exception e)
            {
                Log.Error(@"GetAuthenticatedUser, 
                    Type:GetAuthenticatedUserError,
                    Description: Error on GetAuthenticatedUser:
                    request: {@request},
                    response: {@error}", request, e);
                throw new Exception("Error al autenticar el usuario en SSO: " + e.Message);
            }
        }

        public void FilterUserPermissions(ref User user)
        {
            if (user.Roles.Any(x => x.Name.ToLower() == "cuentasacobrar"))
            {
                var allowedToLockAdvancePayments = Configuration.GetSection("AllowedToLockAdvancePayments").Get<string[]>();
                if (allowedToLockAdvancePayments.Any() && allowedToLockAdvancePayments.Contains(user.Email))
                {
                    int index = user.Roles.FindIndex(x => x.Name.ToLower() == "cuentasacobrar");
                    user.Roles[index].Permissions.Add(new Permission { Code = EPermission.Access_AdvancePayments });
                    user.Roles[index].Permissions.Add(new Permission { Code = EPermission.Lock_AdvancePayments });
                }
            }

            if (user.Roles.Count == 1 && user.Roles.Any(x => x.Name.ToLower() == "cliente"))
            {
                List<Restriction> userRestrictions = _restrictionsListRepository.GetRestrictionsListByUserId(user.Id);
                if (userRestrictions.Any())
                {
                    var deniedPermissions = userRestrictions.Select(x => x.PermissionDeniedCode).ToList();
                    user.Roles[0].Permissions = user.Roles[0].Permissions
                        .Where(x => !deniedPermissions.Contains(x.Code)).ToList();
                }
            }
        }

        public User GetUserById(string Id)
        {
            RestRequest request = new RestRequest("/Usuario/GetUserDataById", Method.GET);
            request.AddParameter("id", Id);
            request.AddParameter("sistema", "Cobra");
            request.AddHeader("Authorization", "Bearer " + _ssoApiConfig.Get(ApiServicesConfig.SsoApi).Token);

            // execute the request
            IRestResponse<UserDataResponse> userDataResponse = (RestResponse<UserDataResponse>)_restClient.Execute<UserDataResponse>(request);

            if (userDataResponse.IsSuccessful && userDataResponse.Data != null)
            {
                List<string> additionalCuits = userDataResponse.Data.UserDataCuits ?? new List<string>() { };
                List<Restriction> restrictions = _restrictionsListRepository.GetRestrictionsListByUserId(userDataResponse.Data.IdApplicationUser.ToString());

                return new User()
                {
                    Id = userDataResponse.Data.IdApplicationUser,
                    Email = userDataResponse.Data.Email,
                    FirstName = userDataResponse.Data.RazonSocial,
                    LastName = userDataResponse.Data.RazonSocial,
                    Cuit = Convert.ToInt64(userDataResponse.Data.Cuit),
                    AdditionalCuits = additionalCuits,
                    //Si Data viene en null, envia lista vacia al repo, porque si le llega null devuelve tdos los roles del sisetma 
                    //(terrible agujero de seguridad)
                    Roles = _roleRepository.get(userDataResponse.Data.Roles ?? new List<string>() { })
                    //TODO: Agregar BU aca y quizas tambien hayque hacer que lo devuelva el SSO en el endpoint.
                };
            }
            return null;
        }

        public List<UserDataResponse> GetSsoUsers()
        {
            Log.Debug(@"Starting Sso Users Syncing...");
            RestRequest request = new RestRequest("/Usuario/GetUsersDataBySystem", Method.GET);
            request.AddParameter("sistema", "Cobra");
            request.AddHeader("Authorization", "Bearer " + _ssoApiConfig.Get(ApiServicesConfig.SsoApi).Token);

            try
            {
                IRestResponse<List<UserDataResponse>> usersDataResponse = (RestResponse<List<UserDataResponse>>)_restClient.Execute<List<UserDataResponse>>(request);

                if (usersDataResponse.IsSuccessful && usersDataResponse.Data != null)
                {
                    Log.Debug(@"GetSsoUsers, 
                        Type: GetSsoUsersSuccess,
                        Description: Response succesfull:
                        request: {@request},
                        response: {@response}", request, usersDataResponse);
                    return usersDataResponse.Data;
                }
                else
                {
                    Log.Information(@"GetSsoUsers, 
                        Type: GetSsoUsersWarning,
                        Description: Response not succesfull or Data is null:
                        request: {@request},
                        response: {@response}", request, usersDataResponse);
                    return null;
                }
            }
            catch (Exception e)
            {
                Log.Error(@"GetSsoUsers, 
                    Type: GetSsoUsersError,
                    Description: Error fetching Sso Users:
                    request: {@request},
                    response: {@error}", request, e);
                throw new Exception("Error al obtener los usuarios del sso: " + e.Message);
            }
        }

        public List<EmpresaResponse> GetSsoEmpresas()
        {
            Log.Debug(@"Starting Sso Empresas Syncing...");
            RestRequest request = new RestRequest("/Empresa", Method.GET);
            request.AddParameter("sistema", "Cobra");
            request.AddHeader("Authorization", "Bearer " + _ssoApiConfig.Get(ApiServicesConfig.SsoApi).Token);

            try
            {
                IRestResponse<List<EmpresaResponse>> empresaResponse = (RestResponse<List<EmpresaResponse>>)_restClient.Execute<List<EmpresaResponse>>(request);

                if (empresaResponse.IsSuccessful && empresaResponse.Data != null)
                {
                    Log.Debug(@"GetSsoEmpresas, 
                        Type: GetSsoEmpresasSuccess,
                        Description: Response succesfull:
                        request: {@request},
                        response: {@response}", request, empresaResponse);
                    return empresaResponse.Data;
                }
                else
                {
                    Log.Debug(@"GetSsoEmpresas, 
                        Type: GetSsoEmpresasWarning,
                        Description: Response not succesfull or Data is null:
                        request: {@request},
                        response: {@response}", request, empresaResponse);
                    return null;
                }
            }
            catch (Exception e)
            {
                Log.Error(@"GetSsoEmpresas, 
                    Type: GetSsoEmpresasError,
                    Description: Error fetching Sso Users:
                    request: {@request},
                    response: {@error}", request, e);
                throw new Exception("Error al obtener las empresas del sso: " + e.Message);
            }
        }

        public List<LastAccessViewModel> GetAllLastAccess()
        {
            var request = new RestRequest("/Account/GetAllLastAccess/Cobra", Method.GET);
            request.AddHeader("Authorization", "Bearer " + _ssoApiConfig.Get(ApiServicesConfig.SsoApi).Token);

            try
            {
                IRestResponse<List<LastAccessViewModel>> lastLoginResponse =
                    (RestResponse<List<LastAccessViewModel>>) _restClient.Execute<List<LastAccessViewModel>>(request);
                if (lastLoginResponse.IsSuccessful && lastLoginResponse.Data != null)
                {
                    return lastLoginResponse.Data.OrderByDescending(x => x.LastLogin).ToList();
                }
                Log.Warning(@"GetAllLastAccess, 
                        Type:GetAllLastAccessWarn,
                        Description: Response was not successful:
                        request: {@request},
                        response: {@response}", request, lastLoginResponse);
                return null;
            }
            catch (Exception e)
            {
                Log.Error(@"GetAllLastAccess, 
                    Type:GetAllLastAccessError,
                    Description: Error on GetAllLastAccess:
                    request: {@request},
                    response: {@error}", request, e);
                throw new Exception("Error al obtener ultimos accesos en SSO: " + e.Message);
            }
        }

        public List<ClientDuplicatedEmailsViewModel> GetAllClientDuplicatedMails()
        {
            var request = new RestRequest("/Account/GetAllDuplicatedClientEmails", Method.GET);
            request.AddHeader("Authorization", "Bearer " + _ssoApiConfig.Get(ApiServicesConfig.SsoApi).Token);

            try
            {
                IRestResponse<List<ClientDuplicatedEmailsViewModel>> duplicatedClientEmailsResponse =
                    (RestResponse<List<ClientDuplicatedEmailsViewModel>>) _restClient.Execute<List<ClientDuplicatedEmailsViewModel>>(request);
                if (duplicatedClientEmailsResponse.IsSuccessful && duplicatedClientEmailsResponse.Data != null)
                {

                    return duplicatedClientEmailsResponse.Data;

                }
                Log.Warning(@"GetAllDuplicatedClientEmails, 
                        Type:GetAllDuplicatedClientEmailsWarn,
                        Description: Response was not successful:
                        request: {@request},
                        response: {@response}", request, duplicatedClientEmailsResponse);
                return null;
            }
            catch (Exception e)
            {
                Log.Error(@"GetAllDuplicatedClientEmails, 
                    Type:GetAllDuplicatedClientEmailsError,
                    Description: Error on GetAllDuplicatedClientEmails:
                    request: {@request},
                    response: {@error}", request, e);
                throw new Exception("Error al obtener ultimos accesos en SSO: " + e.Message);
            }
        }

        public List<CreatedUsersViewModel> GetAllCreatedUsers()
        {
            var request = new RestRequest("/Usuario/GetAllCreatedUsers", Method.GET);
            request.AddHeader("Authorization", "Bearer " + _ssoApiConfig.Get(ApiServicesConfig.SsoApi).Token);

            try
            {
                IRestResponse<List<CreatedUsersViewModel>> userCreatedResponse =
                    (RestResponse<List<CreatedUsersViewModel>>)_restClient.Execute<List<CreatedUsersViewModel>>(request);
                if (userCreatedResponse.IsSuccessful && userCreatedResponse.Data != null)
                {

                    return userCreatedResponse.Data;

                }
                Log.Warning(@"GetAllCreatedUsers, 
                        Type:GetAllCreatedUsersWarn,
                        Description: Response was not successful:
                        request: {@request},
                        response: {@response}", request, userCreatedResponse);
                return null;
            }
            catch (Exception e)
            {
                Log.Error(@"GetAllCreatedUsers, 
                    Type:GetAllCreatedUsersError,
                    Description: Error on GetAllCreatedUsers:
                    request: {@request},
                    response: {@error}", request, e);
                throw new Exception("Error al obtener usarios creados en SSO: " + e.Message);
            }
        }

        public async Task<List<ForeignCuit>> GetAllForeignCuits()
        {
            var request = new RestRequest("/Usuario/GetForeignCuits", Method.GET);
            request.AddHeader("Authorization", "Bearer " + _ssoApiConfig.Get(ApiServicesConfig.SsoApi).Token);

            try
            {
                var userCreatedResponse = await _restClient.ExecuteAsync<List<ForeignCuit>>(request);
                if (userCreatedResponse.IsSuccessful && userCreatedResponse.Data != null)
                {
                    return userCreatedResponse.Data;
                }

                Log.Warning(@"GetAllForeignCuits, 
                        Type:GetAllForeignCuitsWarn,
                        Description: Response was not successful:
                        request: {@request},
                        response: {@response}", request, userCreatedResponse);

                return null;
            }
            catch (Exception e)
            {
                Log.Error(@"GetAllForeignCuits, 
                    Type:GetAllForeignCuitsError,
                    Description: Error on GetAllForeignCuits:
                    request: {@request},
                    response: {@error}", request, e);
                throw new Exception("Error al obtener usarios creados en SSO: " + e.Message);
            }
        }
    }
}
